// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

package system

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NTable struct {
	TableId              uint64     `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	TableName            string     `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Schema               string     `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Columns              []*NColumn `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NTable) Reset()         { *m = NTable{} }
func (m *NTable) String() string { return proto.CompactTextString(m) }
func (*NTable) ProtoMessage()    {}
func (*NTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

func (m *NTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NTable.Unmarshal(m, b)
}
func (m *NTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NTable.Marshal(b, m, deterministic)
}
func (m *NTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NTable.Merge(m, src)
}
func (m *NTable) XXX_Size() int {
	return xxx_messageInfo_NTable.Size(m)
}
func (m *NTable) XXX_DiscardUnknown() {
	xxx_messageInfo_NTable.DiscardUnknown(m)
}

var xxx_messageInfo_NTable proto.InternalMessageInfo

func (m *NTable) GetTableId() uint64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *NTable) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *NTable) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *NTable) GetColumns() []*NColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

type NColumn struct {
	ColumnId             uint64   `protobuf:"varint,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	ColumnName           string   `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnTypeName       string   `protobuf:"bytes,3,opt,name=column_type_name,json=columnTypeName,proto3" json:"column_type_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NColumn) Reset()         { *m = NColumn{} }
func (m *NColumn) String() string { return proto.CompactTextString(m) }
func (*NColumn) ProtoMessage()    {}
func (*NColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{1}
}

func (m *NColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NColumn.Unmarshal(m, b)
}
func (m *NColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NColumn.Marshal(b, m, deterministic)
}
func (m *NColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NColumn.Merge(m, src)
}
func (m *NColumn) XXX_Size() int {
	return xxx_messageInfo_NColumn.Size(m)
}
func (m *NColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_NColumn.DiscardUnknown(m)
}

var xxx_messageInfo_NColumn proto.InternalMessageInfo

func (m *NColumn) GetColumnId() uint64 {
	if m != nil {
		return m.ColumnId
	}
	return 0
}

func (m *NColumn) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *NColumn) GetColumnTypeName() string {
	if m != nil {
		return m.ColumnTypeName
	}
	return ""
}

func init() {
	proto.RegisterType((*NTable)(nil), "system.NTable")
	proto.RegisterType((*NColumn)(nil), "system.NColumn")
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor_1c5fb4d8cc22d66a) }

var fileDescriptor_1c5fb4d8cc22d66a = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x8d, 0x2d, 0x49, 0x73, 0xa3, 0x55, 0xee, 0x42, 0x46, 0x45, 0x0c, 0x59, 0x8d, 0x9b,
	0x08, 0xf5, 0x05, 0x84, 0xae, 0xba, 0xc9, 0x22, 0xed, 0x5e, 0xa6, 0xc9, 0x05, 0x0b, 0x9d, 0x26,
	0x66, 0x46, 0x21, 0x0f, 0xe0, 0x7b, 0x8b, 0xf7, 0x8e, 0x3f, 0x74, 0x37, 0xe7, 0x3b, 0xc3, 0xcc,
	0xc7, 0x81, 0x33, 0xd7, 0xbc, 0x92, 0x35, 0x65, 0x3f, 0x74, 0xbe, 0xc3, 0xd8, 0x8d, 0xce, 0x93,
	0x2d, 0x3e, 0x23, 0x88, 0xab, 0x8d, 0xd9, 0xee, 0x09, 0xaf, 0x61, 0xe6, 0xbf, 0x0f, 0x2f, 0xbb,
	0x56, 0x45, 0x79, 0xa4, 0xa7, 0x75, 0xc2, 0x79, 0xd5, 0xe2, 0x1d, 0x80, 0x54, 0x07, 0x63, 0x49,
	0x9d, 0xe6, 0x91, 0x4e, 0xeb, 0x94, 0x49, 0x65, 0x2c, 0xe1, 0x15, 0xc4, 0xf2, 0xb8, 0x9a, 0x70,
	0x15, 0x12, 0x3e, 0x40, 0xd2, 0x74, 0xfb, 0x77, 0x7b, 0x70, 0x6a, 0x9a, 0x4f, 0x74, 0xb6, 0xb8,
	0x28, 0xe5, 0xdb, 0xb2, 0x5a, 0x32, 0xaf, 0x7f, 0xfa, 0xe2, 0x0d, 0x92, 0xc0, 0xf0, 0x16, 0x52,
	0xa1, 0x7f, 0x22, 0x33, 0x01, 0xab, 0x16, 0xef, 0x21, 0x0b, 0xe5, 0x3f, 0x15, 0x10, 0xc4, 0x2e,
	0x1a, 0x2e, 0xc3, 0x05, 0x3f, 0xf6, 0x41, 0x58, 0xac, 0xe6, 0xc2, 0x37, 0x63, 0xcf, 0xd6, 0x8b,
	0x67, 0x38, 0x5f, 0xb3, 0xe7, 0x9a, 0x86, 0x8f, 0x5d, 0x43, 0xf8, 0x08, 0xd9, 0x72, 0x20, 0xe3,
	0x49, 0xf6, 0x98, 0xff, 0xca, 0x72, 0xbe, 0x39, 0xca, 0xc5, 0xc9, 0x36, 0xe6, 0x2d, 0x9f, 0xbe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x5a, 0x84, 0x74, 0x5b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchemaServiceClient is the client API for SchemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchemaServiceClient interface {
	// Execute executes the specified SQL query (might be in a
	// transaction context, if Query.transaction_id is set).
	CreateTable(ctx context.Context, in *NTable, opts ...grpc.CallOption) (*NTable, error)
}

type schemaServiceClient struct {
	cc *grpc.ClientConn
}

func NewSchemaServiceClient(cc *grpc.ClientConn) SchemaServiceClient {
	return &schemaServiceClient{cc}
}

func (c *schemaServiceClient) CreateTable(ctx context.Context, in *NTable, opts ...grpc.CallOption) (*NTable, error) {
	out := new(NTable)
	err := c.cc.Invoke(ctx, "/system.SchemaService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaServiceServer is the server API for SchemaService service.
type SchemaServiceServer interface {
	// Execute executes the specified SQL query (might be in a
	// transaction context, if Query.transaction_id is set).
	CreateTable(context.Context, *NTable) (*NTable, error)
}

func RegisterSchemaServiceServer(s *grpc.Server, srv SchemaServiceServer) {
	s.RegisterService(&_SchemaService_serviceDesc, srv)
}

func _SchemaService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.SchemaService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServiceServer).CreateTable(ctx, req.(*NTable))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchemaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "system.SchemaService",
	HandlerType: (*SchemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _SchemaService_CreateTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
